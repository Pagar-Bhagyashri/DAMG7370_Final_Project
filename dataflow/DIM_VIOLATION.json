{
	"name": "DIM_VIOLATION",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FinalProjectSchemaStagingDallas",
						"type": "DatasetReference"
					},
					"name": "STAGEDDALLAS"
				},
				{
					"dataset": {
						"referenceName": "FinalProjectSchemaStageChicago",
						"type": "DatasetReference"
					},
					"name": "STAGEDCHICAGO"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimViolation",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "FlaggingDuplicates"
				},
				{
					"name": "SplitTheDuplicates"
				},
				{
					"name": "DeDuplicatedData"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,0),",
				"          LONGITUDE as decimal(38,0),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STAGEDDALLAS",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,16),",
				"          LONGITUDE as decimal(38,16),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STAGEDCHICAGO",
				"STAGEDDALLAS, STAGEDCHICAGO union(byName: true)~> union1",
				"aggregate2 select(mapColumn(",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"DeDuplicatedData keyGenerate(output(VIOLATION_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(DI_JOB_ID = \"RARA\",",
				"          DI_LOAD_DT = currentTimestamp()) ~> derivedColumn1",
				"select1 window(over(VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS),",
				"     desc(VIOLATION_CATEGORY_ID, true),",
				"     desc(VIOLATION_COMMENTS, true),",
				"     Record_Count = count(1),",
				"          IsLatest = rank() == 1) ~> FlaggingDuplicates",
				"FlaggingDuplicates split(Record_Count == 1,",
				"     Record_Count > 1 && IsLatest == true(),",
				"     IsLatest == false(),",
				"     disjoint: false) ~> SplitTheDuplicates@(UniqueRecords, LatestDuplicates, OlderDuplicates)",
				"SplitTheDuplicates@UniqueRecords, SplitTheDuplicates@LatestDuplicates union(byName: true)~> DeDuplicatedData",
				"derivedColumn1 aggregate(groupBy(VIOLATION_SK,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_CATEGORY_ID,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT),",
				"     countrec = count(VIOLATION_CATEGORY_ID)) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          VIOLATION_SK,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"union1 aggregate(groupBy(INSPECTION_ID,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          FACILITY_TYPE,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          SURROGATE_KEY),",
				"     count = count(INSPECTION_ID)) ~> aggregate2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          VIOLATION_SK as decimal(25,0),",
				"          VIOLATION_CAT_ID as decimal(10,0),",
				"          VIOLATION_CAT as string,",
				"          VIOLATION_COMMENTS as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          VIOLATION_CAT_ID = VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CAT = VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_SK,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sink1"
			]
		}
	}
}