{
	"name": "DIM_FACILITY",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgChicago",
						"type": "DatasetReference"
					},
					"name": "STAGECHICAGO"
				},
				{
					"dataset": {
						"referenceName": "stgDallas",
						"type": "DatasetReference"
					},
					"name": "STAGEDALLAS"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimFacility",
						"type": "DatasetReference"
					},
					"name": "sinkDimFacility"
				}
			],
			"transformations": [
				{
					"name": "Combine"
				},
				{
					"name": "SelectReqColumns"
				},
				{
					"name": "AddSurrogateKey"
				},
				{
					"name": "FlaggingDuplicates"
				},
				{
					"name": "UniqueRecords"
				},
				{
					"name": "DeDuplicatedData"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "CreateJobIdAndLoadDt"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,16),",
				"          LONGITUDE as decimal(38,16),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STAGECHICAGO",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,0),",
				"          LONGITUDE as decimal(38,0),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STAGEDALLAS",
				"STAGECHICAGO, STAGEDALLAS union(byName: true)~> Combine",
				"aggregate1 select(mapColumn(",
				"          AKA_NAME,",
				"          DBA_NAME,",
				"          FACILITY_TYPE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqColumns",
				"DeDuplicatedData keyGenerate(output(FACILITY_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddSurrogateKey",
				"CreateJobIdAndLoadDt window(over(FACILITY_TYPE,",
				"          DBA_NAME),",
				"     asc(AKA_NAME, true),",
				"     Record_Count = count(1),",
				"          IsLatest = rank() == 1) ~> FlaggingDuplicates",
				"FlaggingDuplicates split(Record_Count == 1,",
				"     Record_Count> 1 && IsLatest == true(),",
				"     IsLatest == false(),",
				"     disjoint: false) ~> UniqueRecords@(UniqueRecords, LatestDuplicates, OlderDuplicates)",
				"UniqueRecords@UniqueRecords, UniqueRecords@LatestDuplicates union(byName: true)~> DeDuplicatedData",
				"aggregate2 select(mapColumn(",
				"          FACILITY_SK,",
				"          FACILITY_TYPE,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectReqColumns derive(DI_JOB_ID = \"Abbey\",",
				"          DI_LOAD_DT = currentTimestamp()) ~> CreateJobIdAndLoadDt",
				"Combine aggregate(groupBy(AKA_NAME,",
				"          INSPECTION_ID,",
				"          DBA_NAME,",
				"          FACILITY_TYPE,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          SURROGATE_KEY),",
				"     count = count(INSPECTION_RESULT)) ~> aggregate1",
				"AddSurrogateKey aggregate(groupBy(FACILITY_SK,",
				"          FACILITY_TYPE,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT),",
				"     count = count(AKA_NAME)) ~> aggregate2",
				"SelectColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FACILITY_SK as decimal(15,0),",
				"          FACILITY_TYPE as string,",
				"          AKA_NAME as string,",
				"          DBA_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          FACILITY_SK,",
				"          FACILITY_TYPE,",
				"          AKA_NAME,",
				"          DBA_NAME,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sinkDimFacility"
			]
		}
	}
}