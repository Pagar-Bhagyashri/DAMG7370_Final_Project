{
	"name": "DIM_INSPECTION_TYPE",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgChicago",
						"type": "DatasetReference"
					},
					"name": "STAGECHICAGO"
				},
				{
					"dataset": {
						"referenceName": "stgDallas",
						"type": "DatasetReference"
					},
					"name": "STAGEDALLAS"
				},
				{
					"dataset": {
						"referenceName": "DimInspectionType",
						"type": "DatasetReference"
					},
					"name": "srcDimInspectio"
				},
				{
					"dataset": {
						"referenceName": "DimInspectionType",
						"type": "DatasetReference"
					},
					"name": "srcDimInspectionType"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimInspectionType",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "CheckUniques"
				},
				{
					"name": "join2"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,16),",
				"          LONGITUDE as decimal(38,16),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STAGECHICAGO",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,16),",
				"          LONGITUDE as decimal(38,16),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STAGEDALLAS",
				"source(output(",
				"          MAX_INSPECTION_TYPE as decimal(30,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(INSPECTION_TYPE_SK),0) AS MAX_INSPECTION_TYPE FROM FOOD_INSPECTION_SCHEMA.DIM_INSPECTION_TYPE',",
				"     format: 'query') ~> srcDimInspectio",
				"source(output(",
				"          INSPECTION_TYPE_SK as decimal(30,0),",
				"          INSPECTION_ID as decimal(10,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcDimInspectionType",
				"STAGECHICAGO, STAGEDALLAS union(byName: true)~> union1",
				"join2 select(mapColumn(",
				"          INSPECTION_ID = CheckUniques@INSPECTION_ID,",
				"          INSPECTION_TYPE = CheckUniques@INSPECTION_TYPE,",
				"          INSPECTION_RESULT = CheckUniques@INSPECTION_RESULT,",
				"          MAX_INSPECTION_TYPE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(countrow as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(DI_JOB_ID = \"RARA\",",
				"          INSPECTION_TYPE_SK = MAX_INSPECTION_TYPE + countrow,",
				"          DI_LOAD_DT = currentTimestamp()) ~> derivedColumn1",
				"union1, srcDimInspectio join(1 == 1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_ID,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          FACILITY_TYPE,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          INSPECTION_DATE,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          SURROGATE_KEY,",
				"          MAX_INSPECTION_TYPE),",
				"     count = count()) ~> CheckUniques",
				"CheckUniques, srcDimInspectionType join(CheckUniques@INSPECTION_TYPE == srcDimInspectionType@INSPECTION_TYPE",
				"     && CheckUniques@INSPECTION_RESULT == srcDimInspectionType@INSPECTION_RESULT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"derivedColumn1 aggregate(groupBy(INSPECTION_TYPE_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT),",
				"     count = count(countrow)) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          INSPECTION_TYPE_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_ID,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_TYPE_SK as decimal(30,0),",
				"          INSPECTION_ID as decimal(10,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sink1"
			]
		}
	}
}