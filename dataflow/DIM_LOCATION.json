{
	"name": "DIM_LOCATION",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgChicago",
						"type": "DatasetReference"
					},
					"name": "srcStgChicago"
				},
				{
					"dataset": {
						"referenceName": "stgDallas",
						"type": "DatasetReference"
					},
					"name": "srcStgDallas"
				},
				{
					"dataset": {
						"referenceName": "DimLocation",
						"type": "DatasetReference"
					},
					"name": "dimLocation1"
				},
				{
					"dataset": {
						"referenceName": "DimLocation",
						"type": "DatasetReference"
					},
					"name": "dimLocation2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimLocation",
						"type": "DatasetReference"
					},
					"name": "sinkDimLocation"
				}
			],
			"transformations": [
				{
					"name": "combiningDatasets"
				},
				{
					"name": "joinCROSS"
				},
				{
					"name": "Aggregate"
				},
				{
					"name": "joinLefter"
				},
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "SelectingColumns"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,16),",
				"          LONGITUDE as decimal(38,16),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcStgChicago",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,0),",
				"          LONGITUDE as decimal(38,0),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcStgDallas",
				"source(output(",
				"          MAX_LOCATION_SK as decimal(20,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(LOCATION_SK),0) AS MAX_LOCATION_SK FROM FOOD_INSPECTION_SCHEMA.DIM_LOCATION',",
				"     format: 'query') ~> dimLocation1",
				"source(output(",
				"          LOCATION_SK as decimal(20,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(10,0),",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> dimLocation2",
				"srcStgChicago, srcStgDallas union(byName: true)~> combiningDatasets",
				"combiningDatasets, dimLocation1 join(1 == 1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCROSS",
				"joinCROSS aggregate(groupBy(ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          MAX_LOCATION_SK,",
				"          INSPECTION_ID,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          FACILITY_TYPE,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          SURROGATE_KEY),",
				"     count_num = count(INSPECTION_ID)) ~> Aggregate",
				"Aggregate, dimLocation2 join(Aggregate@ADDRESS == dimLocation2@ADDRESS",
				"     && Aggregate@CITY == dimLocation2@CITY",
				"     && Aggregate@STATE == dimLocation2@STATE",
				"     && Aggregate@ZIP == dimLocation2@ZIP",
				"     && Aggregate@LATITUDE == dimLocation2@LATITUDE",
				"     && Aggregate@LONGITUDE == dimLocation2@LONGITUDE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLefter",
				"joinLefter select(mapColumn(",
				"          LOCATION_SK,",
				"          ADDRESS = Aggregate@ADDRESS,",
				"          CITY = Aggregate@CITY,",
				"          STATE = Aggregate@STATE,",
				"          ZIP = Aggregate@ZIP,",
				"          LATITUDE = Aggregate@LATITUDE,",
				"          LONGITUDE = Aggregate@LONGITUDE,",
				"          MAX_LOCATION_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(Row_Count as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey derive(DI_JOB_ID = \"Abbey\",",
				"          DI_LOAD_DT = currentTimestamp(),",
				"          ZIP = toInteger(ZIP),",
				"          LOCATION_SK = MAX_LOCATION_SK + Row_Count) ~> SelectingColumns",
				"SelectingColumns aggregate(groupBy(LOCATION_SK,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          MAX_LOCATION_SK,",
				"          Row_Count,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT),",
				"     count = count(LOCATION_SK)) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          LOCATION_SK,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LOCATION_SK as decimal(20,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(10,0),",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LOCATION_SK,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sinkDimLocation"
			]
		}
	}
}