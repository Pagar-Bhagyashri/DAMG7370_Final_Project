{
	"name": "DIM_DATE",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable12",
						"type": "DatasetReference"
					},
					"name": "STAGEDDALLAS"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable13",
						"type": "DatasetReference"
					},
					"name": "STAGEDCHICAGO"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable15",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable16",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID as string (\"11\")",
				"}",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,0),",
				"          LONGITUDE as decimal(38,0),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STAGEDDALLAS",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,16),",
				"          LONGITUDE as decimal(38,16),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STAGEDCHICAGO",
				"source(output(",
				"          MAX_DATE as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(DATE_SK),0) AS MAX_DATE FROM FOOD_INSPECTION_SCHEMA.DIM_DATE',",
				"     format: 'query') ~> source1",
				"STAGEDDALLAS, STAGEDCHICAGO union(byName: true)~> union",
				"join1 select(mapColumn(",
				"          INSPECTION_DATE,",
				"          MAX_DATE",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"union, source1 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 keyGenerate(output(Row_Num as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(DI_JOB_ID = $JOB_ID,",
				"          DI_LOAD_DT = currentTimestamp(),",
				"          DT = INSPECTION_DATE,",
				"          DAY_NAME = iif(dayOfWeek(INSPECTION_DATE) == 0, 'Sunday',iif(dayOfWeek(INSPECTION_DATE) == 1, 'Monday',iif(dayOfWeek(INSPECTION_DATE) == 2, 'Tuesday',iif(dayOfWeek(INSPECTION_DATE) == 3, 'Wednesday',iif(dayOfWeek(INSPECTION_DATE) == 4, 'Thursday',iif(dayOfWeek(INSPECTION_DATE) == 5, 'Friday','Saturday'))))))\r",
				" ,",
				"          DAY_ABBR = iif(dayOfWeek(INSPECTION_DATE) == 0, 'Sun', iif(dayOfWeek(INSPECTION_DATE) == 1, 'Mon', iif(dayOfWeek(INSPECTION_DATE) == 2, 'Tue', iif(dayOfWeek(INSPECTION_DATE) == 3, 'Wed', iif(dayOfWeek(INSPECTION_DATE) == 4, 'Thu', iif(dayOfWeek(INSPECTION_DATE) == 5, 'Fri', 'Sat')))))),",
				"          DAY_NUM = dayOfMonth(INSPECTION_DATE),",
				"          MONTH_NAME = iif(month(INSPECTION_DATE) == 1, 'January', iif(month(INSPECTION_DATE) == 2, 'February', iif(month(INSPECTION_DATE) == 3, 'March', iif(month(INSPECTION_DATE) == 4, 'April', iif(month(INSPECTION_DATE) == 5, 'May', iif(month(INSPECTION_DATE) == 6, 'June', iif(month(INSPECTION_DATE) == 7, 'July', iif(month(INSPECTION_DATE) == 8, 'August', iif(month(INSPECTION_DATE) == 9, 'September', iif(month(INSPECTION_DATE) == 10, 'October', iif(month(INSPECTION_DATE) == 11, 'November', 'December'))))))))))),",
				"          MONTH_ABBR = iif(month(INSPECTION_DATE) == 1, 'Jan', iif(month(INSPECTION_DATE) == 2, 'Feb', iif(month(INSPECTION_DATE) == 3, 'Mar', iif(month(INSPECTION_DATE) == 4, 'Apr', iif(month(INSPECTION_DATE) == 5, 'May', iif(month(INSPECTION_DATE) == 6, 'Jun', iif(month(INSPECTION_DATE) == 7, 'Jul', iif(month(INSPECTION_DATE) == 8, 'Aug', iif(month(INSPECTION_DATE) == 9, 'Sep', iif(month(INSPECTION_DATE) == 10, 'Oct', iif(month(INSPECTION_DATE) == 11, 'Nov', 'Dec'))))))))))),",
				"          MONTH_NUM = month(INSPECTION_DATE),",
				"          QTR_NUM = iif(month(INSPECTION_DATE) <= 3, 1, iif(month(INSPECTION_DATE) <= 6, 2, iif(month(INSPECTION_DATE) <= 9, 3, 4))),",
				"          YEAR_NUM = year(INSPECTION_DATE),",
				"          IS_WEEKEND = iif(dayOfWeek(INSPECTION_DATE) == 0 || dayOfWeek(INSPECTION_DATE) == 6, 1, 0)  ,",
				"          ROW_NUM2 = Row_Num+MAX_DATE) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DATE_SK as decimal(10,0),",
				"          DATE as date,",
				"          DAY_NAME as string,",
				"          DAY_ABBR as string,",
				"          DAY_NUM as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as decimal(2,0),",
				"          QTR_NUM as decimal(2,0),",
				"          YEAR_NUM as decimal(4,0),",
				"          IS_WEEKEND as decimal(2,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          DATE_SK = Row_Num,",
				"          DATE = INSPECTION_DATE,",
				"          DAY_NAME,",
				"          DAY_ABBR,",
				"          DAY_NUM,",
				"          MONTH_NAME,",
				"          MONTH_ABBR,",
				"          MONTH_NUM,",
				"          QTR_NUM,",
				"          YEAR_NUM,",
				"          IS_WEEKEND,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sink1"
			]
		}
	}
}