{
	"name": "Mapping Data Flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CHICAGO_21_22",
						"type": "DatasetReference"
					},
					"name": "CHICAGO2122"
				},
				{
					"dataset": {
						"referenceName": "CHICAGO_22_23",
						"type": "DatasetReference"
					},
					"name": "CHICAGO2223"
				},
				{
					"dataset": {
						"referenceName": "CHICAGO_23_24",
						"type": "DatasetReference"
					},
					"name": "CHICAGO2324"
				},
				{
					"dataset": {
						"referenceName": "CHICAGO_24_25",
						"type": "DatasetReference"
					},
					"name": "CHICAGO2425"
				},
				{
					"dataset": {
						"referenceName": "CHICAGO_25",
						"type": "DatasetReference"
					},
					"name": "CHICAGO25"
				},
				{
					"dataset": {
						"referenceName": "DALLAS_21_22",
						"type": "DatasetReference"
					},
					"name": "DALLAS2122"
				},
				{
					"dataset": {
						"referenceName": "DALLAS_22_23",
						"type": "DatasetReference"
					},
					"name": "DALLAS2223"
				},
				{
					"dataset": {
						"referenceName": "DALLAS_23_24",
						"type": "DatasetReference"
					},
					"name": "DALLAS2324"
				},
				{
					"dataset": {
						"referenceName": "DALLAS_24_25",
						"type": "DatasetReference"
					},
					"name": "DALLAS2425"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "InspectCHICAGO2122"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Inspection_ID as integer,",
				"          DBA_Name as string,",
				"          AKA_Name as string,",
				"          Facility_Type as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as double,",
				"          Inspection_Date as string,",
				"          Inspection_Type as string,",
				"          Inspection_Result as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Violation_Category_ID as string,",
				"          Violation_Category as string,",
				"          Violation_Comments as string,",
				"          Violation_Point as long,",
				"          Risk_Level as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CHICAGO2122",
				"source(output(",
				"          Inspection_ID as integer,",
				"          DBA_Name as string,",
				"          AKA_Name as string,",
				"          Facility_Type as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as double,",
				"          Inspection_Date as string,",
				"          Inspection_Type as string,",
				"          Inspection_Result as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Violation_Category_ID as string,",
				"          Violation_Category as string,",
				"          Violation_Comments as string,",
				"          Violation_Point as long,",
				"          Risk_Level as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CHICAGO2223",
				"source(output(",
				"          Inspection_ID as integer,",
				"          DBA_Name as string,",
				"          AKA_Name as string,",
				"          Facility_Type as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as double,",
				"          Inspection_Date as string,",
				"          Inspection_Type as string,",
				"          Inspection_Result as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Violation_Category_ID as string,",
				"          Violation_Category as string,",
				"          Violation_Comments as string,",
				"          Violation_Point as long,",
				"          Risk_Level as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CHICAGO2324",
				"source(output(",
				"          Inspection_ID as integer,",
				"          DBA_Name as string,",
				"          AKA_Name as string,",
				"          Facility_Type as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as double,",
				"          Inspection_Date as string,",
				"          Inspection_Type as string,",
				"          Inspection_Result as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Violation_Category_ID as string,",
				"          Violation_Category as string,",
				"          Violation_Comments as string,",
				"          Violation_Point as long,",
				"          Risk_Level as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CHICAGO2425",
				"source(output(",
				"          Inspection_ID as integer,",
				"          DBA_Name as string,",
				"          AKA_Name as string,",
				"          Facility_Type as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as double,",
				"          Inspection_Date as string,",
				"          Inspection_Type as string,",
				"          Inspection_Result as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Violation_Category_ID as string,",
				"          Violation_Category as string,",
				"          Violation_Comments as string,",
				"          Violation_Point as long,",
				"          Risk_Level as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CHICAGO25",
				"source(output(",
				"          Inspection_ID as string,",
				"          DBA_Name as string,",
				"          Inspection_Type as string,",
				"          Inspection_Date as string,",
				"          Zip_Code as long,",
				"          Address as string,",
				"          Voilation_Point as long,",
				"          Violation_Comment as string,",
				"          State as string,",
				"          Facility_Type as string,",
				"          City as string,",
				"          Violations_Category_Id as long,",
				"          Violations_Category as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Risk_Level as string,",
				"          Inspection_Result as string,",
				"          AKA_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DALLAS2122",
				"source(output(",
				"          Inspection_ID as string,",
				"          DBA_Name as string,",
				"          Inspection_Type as string,",
				"          Inspection_Date as string,",
				"          Zip_Code as long,",
				"          Address as string,",
				"          Voilation_Point as long,",
				"          Violation_Comment as string,",
				"          State as string,",
				"          Facility_Type as string,",
				"          City as string,",
				"          Violations_Category_Id as long,",
				"          Violations_Category as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Risk_Level as string,",
				"          Inspection_Result as string,",
				"          AKA_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DALLAS2223",
				"source(output(",
				"          Inspection_ID as string,",
				"          DBA_Name as string,",
				"          Inspection_Type as string,",
				"          Inspection_Date as string,",
				"          Zip_Code as long,",
				"          Address as string,",
				"          Voilation_Point as long,",
				"          Violation_Comment as string,",
				"          State as string,",
				"          Facility_Type as string,",
				"          City as string,",
				"          Violations_Category_Id as long,",
				"          Violations_Category as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Risk_Level as string,",
				"          Inspection_Result as string,",
				"          AKA_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DALLAS2324",
				"source(output(",
				"          Inspection_ID as string,",
				"          DBA_Name as string,",
				"          Inspection_Type as string,",
				"          Inspection_Date as string,",
				"          Zip_Code as long,",
				"          Address as string,",
				"          Voilation_Point as long,",
				"          Violation_Comment as string,",
				"          State as string,",
				"          Facility_Type as string,",
				"          City as string,",
				"          Violations_Category_Id as long,",
				"          Violations_Category as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Risk_Level as string,",
				"          Inspection_Result as string,",
				"          AKA_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DALLAS2425",
				"CHICAGO2122 derive(FileName = 'CHICAGO 21-22',",
				"          ColumnCount = length(columns()),",
				"          ColumnNames = toString(columns())) ~> InspectCHICAGO2122",
				"InspectCHICAGO2122 union(byName: true)~> union1"
			]
		}
	}
}