{
	"name": "FCT_INSPECTION_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgChicago",
						"type": "DatasetReference"
					},
					"name": "srcStgChicago"
				},
				{
					"dataset": {
						"referenceName": "stgDallas",
						"type": "DatasetReference"
					},
					"name": "srcStgDallas"
				},
				{
					"dataset": {
						"referenceName": "DimFacility",
						"type": "DatasetReference"
					},
					"name": "srcDimFacility"
				},
				{
					"dataset": {
						"referenceName": "DimInspectionType",
						"type": "DatasetReference"
					},
					"name": "srcDimInspectionType"
				},
				{
					"dataset": {
						"referenceName": "DimLocation",
						"type": "DatasetReference"
					},
					"name": "srcDimLocation"
				},
				{
					"dataset": {
						"referenceName": "DimViolation",
						"type": "DatasetReference"
					},
					"name": "srcDimViolation"
				},
				{
					"dataset": {
						"referenceName": "DimDate",
						"type": "DatasetReference"
					},
					"name": "srcDimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FctInspection",
						"type": "DatasetReference"
					},
					"name": "sinkFctInspection"
				}
			],
			"transformations": [
				{
					"name": "CombiningChicagoDallas"
				},
				{
					"name": "AggregateColumns"
				},
				{
					"name": "joinDimFacility"
				},
				{
					"name": "joinDimInspectionType"
				},
				{
					"name": "joinDimLocation"
				},
				{
					"name": "joinDimViolation"
				},
				{
					"name": "joinDimDate"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select6"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,16),",
				"          LONGITUDE as decimal(38,16),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcStgChicago",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          LATITUDE as decimal(38,0),",
				"          LONGITUDE as decimal(38,0),",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_COMMENTS as string,",
				"          VIOLATION_POINT as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          SURROGATE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcStgDallas",
				"source(output(",
				"          FACILITY_SK as decimal(15,0),",
				"          FACILITY_TYPE as string,",
				"          AKA_NAME as string,",
				"          DBA_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcDimFacility",
				"source(output(",
				"          INSPECTION_TYPE_SK as decimal(30,0),",
				"          INSPECTION_ID as decimal(10,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcDimInspectionType",
				"source(output(",
				"          LOCATION_SK as decimal(20,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(10,0),",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcDimLocation",
				"source(output(",
				"          VIOLATION_SK as decimal(25,0),",
				"          VIOLATION_CAT_ID as decimal(10,0),",
				"          VIOLATION_CAT as string,",
				"          VIOLATION_COMMENTS as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcDimViolation",
				"source(output(",
				"          DATE_SK as decimal(10,0),",
				"          DATE as date,",
				"          DAY_NAME as string,",
				"          DAY_ABBR as string,",
				"          DAY_NUM as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as decimal(2,0),",
				"          QTR_NUM as decimal(2,0),",
				"          YEAR_NUM as decimal(4,0),",
				"          IS_WEEKEND as decimal(2,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> srcDimDate",
				"srcStgChicago, srcStgDallas union(byName: true)~> CombiningChicagoDallas",
				"CombiningChicagoDallas aggregate(groupBy(INSPECTION_ID,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          FACILITY_TYPE,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          SURROGATE_KEY),",
				"     count_num = count(INSPECTION_ID)) ~> AggregateColumns",
				"AggregateColumns, srcDimFacility join(AggregateColumns@FACILITY_TYPE == srcDimFacility@FACILITY_TYPE",
				"     && AggregateColumns@DBA_NAME == srcDimFacility@DBA_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimFacility",
				"select1, srcDimInspectionType join(select1@INSPECTION_ID == srcDimInspectionType@INSPECTION_ID",
				"     && select1@INSPECTION_RESULT == srcDimInspectionType@INSPECTION_RESULT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimInspectionType",
				"select2, srcDimLocation join(select2@ADDRESS == srcDimLocation@ADDRESS",
				"     && select2@CITY == srcDimLocation@CITY",
				"     && select2@STATE == srcDimLocation@STATE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimLocation",
				"select3, srcDimViolation join(VIOLATION_CATEGORY_ID == VIOLATION_CAT_ID",
				"     && VIOLATION_CATEGORY == VIOLATION_CAT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimViolation",
				"select4, srcDimDate join(INSPECTION_DATE == DATE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimDate",
				"joinDimFacility select(mapColumn(",
				"          INSPECTION_ID,",
				"          FACILITY_SK,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"joinDimInspectionType select(mapColumn(",
				"          INSPECTION_ID = select1@INSPECTION_ID,",
				"          FACILITY_SK,",
				"          INSPECTION_TYPE_SK,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          INSPECTION_DATE,",
				"          INSPECTION_RESULT = select1@INSPECTION_RESULT,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          DI_JOB_ID = select1@DI_JOB_ID,",
				"          DI_LOAD_DT = select1@DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"joinDimLocation select(mapColumn(",
				"          INSPECTION_ID,",
				"          FACILITY_SK,",
				"          INSPECTION_TYPE_SK,",
				"          LOCATION_SK,",
				"          INSPECTION_DATE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_COMMENTS,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          DI_JOB_ID = select2@DI_JOB_ID,",
				"          DI_LOAD_DT = select2@DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"joinDimViolation select(mapColumn(",
				"          INSPECTION_ID,",
				"          FACILITY_SK,",
				"          INSPECTION_TYPE_SK,",
				"          LOCATION_SK,",
				"          VIOLATION_SK,",
				"          INSPECTION_DATE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_POINT,",
				"          RISK_LEVEL,",
				"          DI_JOB_ID = select3@DI_JOB_ID,",
				"          DI_LOAD_DT = select3@DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"joinDimDate select(mapColumn(",
				"          INSPECTION_ID,",
				"          LOCATION_SK,",
				"          FACILITY_SK,",
				"          INSPECTION_TYPE_SK,",
				"          VIOLATION_SK,",
				"          DATE_SK,",
				"          VIOLATION_POINT,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_DATE,",
				"          RISK_CATEGORY = RISK_LEVEL,",
				"          DI_JOB_ID = select4@DI_JOB_ID,",
				"          DI_LOAD_DT = select4@DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 keyGenerate(output(Inspection_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(INSPECTION_SCORE = 100 - VIOLATION_POINT,",
				"          INSPECTION_YEAR = year(INSPECTION_DATE)) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          INSPECTION_TYPE_SK,",
				"          LOCATION_SK,",
				"          FACILITY_SK,",
				"          Inspection_SK,",
				"          VIOLATION_SK,",
				"          DATE_SK,",
				"          INSPECTION_SCORE,",
				"          VIOLATION_POINT,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_YEAR,",
				"          RISK_CATEGORY,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6 aggregate(groupBy(Inspection_SK,",
				"          LOCATION_SK,",
				"          FACILITY_SK,",
				"          INSPECTION_TYPE_SK,",
				"          VIOLATION_SK,",
				"          DATE_SK,",
				"          INSPECTION_SCORE,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_YEAR,",
				"          VIOLATION_POINT,",
				"          RISK_CATEGORY,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT),",
				"     count = count(INSPECTION_TYPE_SK)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_SK as string,",
				"          LOCATION_SK as decimal(20,0),",
				"          FACILITY_SK as decimal(15,0),",
				"          INSPECTION_TYPE_SK as decimal(30,0),",
				"          VIOLATION_SK as decimal(25,0),",
				"          DATE_SK as decimal(10,0),",
				"          INSPECTION_SCORE as decimal(3,0),",
				"          INSPECTION_RESULT as string,",
				"          INSPECTION_YEAR as decimal(4,0),",
				"          VIOLATION_SCORE as decimal(38,0),",
				"          RISK_CATEGORY as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_SK = Inspection_SK,",
				"          LOCATION_SK,",
				"          FACILITY_SK,",
				"          INSPECTION_TYPE_SK,",
				"          VIOLATION_SK,",
				"          DATE_SK,",
				"          INSPECTION_SCORE,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_YEAR,",
				"          VIOLATION_SCORE = VIOLATION_POINT,",
				"          RISK_CATEGORY,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sinkFctInspection"
			]
		}
	}
}